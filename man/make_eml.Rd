% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make_eml.R
\name{make_eml}
\alias{make_eml}
\title{Make EML metadata}
\usage{
make_eml(
  path,
  data.path = path,
  eml.path = path,
  dataset.title,
  temporal.coverage,
  geographic.description,
  geographic.coordinates,
  maintenance.description,
  data.table = NULL,
  data.table.name = data.table,
  data.table.description = NULL,
  data.table.quote.character = NULL,
  data.table.url = NULL,
  other.entity = NULL,
  other.entity.name = other.entity,
  other.entity.description = NULL,
  other.entity.url = NULL,
  provenance = NULL,
  user.id = NULL,
  user.domain = NULL,
  package.id = NULL,
  write.file = TRUE,
  return.obj = FALSE,
  x = NULL,
  affiliation,
  data.files,
  data.files.description,
  data.files.quote.character,
  data.files.url,
  data.url = NULL,
  zip.dir,
  zip.dir.description
)
}
\arguments{
\item{path}{(character) Path to the metadata template directory.}

\item{data.path}{(character) Path to the data directory.}

\item{eml.path}{(character) Path to the EML directory, where EML files are written.}

\item{dataset.title}{(character) Title of the dataset.}

\item{temporal.coverage}{(character) Beginning and ending dates of the dataset in the format 
"YYYY-MM-DD" (e.g. 
\code{temporal.coverage = c('2012-05-01', '2014-11-30')}).}

\item{geographic.description}{(character) Description of datasets geographic extent. Don't use this 
argument if geographic coverage is supplied by geographic_coverage.txt.}

\item{geographic.coordinates}{(character) Coordinates of datasets geographic extent. Coordinates are
listed in this order: North, East, South, West (e.g. 
\code{geographic.coordinates = c('28.38', '-119.95', '28.38', '-119.95')}).
Longitudes west of the prime meridian and latitudes south of the equator 
are negative. Don't use this argument if geographic coverage is supplied
by geographic_coverage.txt.}

\item{maintenance.description}{(character) Data collection status ("ongoing" or "complete").}

\item{data.table}{(character; optional) Table file name. If more than one, then supply 
as a vector of character strings (e.g. 
\code{data.table = c("nitrogen.csv", "decomp.csv")}).}

\item{data.table.name}{(character; optional) A short descriptive name for the table. Defaults
to \code{data.table}. If more than one, then supply as a vector of 
character strings in the same order as listed in \code{data.table}.}

\item{data.table.description}{(character; optional) Table description. If more than one, then supply 
as a vector of character strings in the same order as listed in 
\code{data.table}.}

\item{data.table.quote.character}{(character; optional) Quote character used in \code{data.table}. If 
more than one, then supply as a vector of character strings in the same 
order as listed in \code{data.table}. If the quote character is a quotation, 
then enter \code{"\\""}. If the quote character is an apostrophe, then 
enter \code{"\\'"}.}

\item{data.table.url}{(character; optional) The publicly accessible URL from which 
\code{data.table} can be downloaded. If more than one, then supply as 
a vector of character strings in the same order as listed in 
\code{data.table}.}

\item{other.entity}{(character; optional) Name of \code{other.entity}(s) in this 
dataset. Use \code{other.entity} for all non-\code{data.table} files. 
\code{other.entity}(s) should be stored at \code{data.path}. If more 
than one, then supply as a vector of character strings (e.g. 
\code{other.entity = c('ancillary_data.zip', 'quality_control.R')}).}

\item{other.entity.name}{(character; optional) A short descriptive name for the other.entity. 
Defaults to \code{other.entity}. If more than one, then supply as a 
vector of character strings in the same order as listed in 
\code{other.entity}.}

\item{other.entity.description}{(character; optional) Description(s) of \code{other.entity}(s). If more 
than one, then supply as a vector of descriptions in the same order as 
listed in \code{other.entity}.}

\item{other.entity.url}{(character; optional) The publicly accessible URL from which 
\code{other.entity} can be downloaded. If more than one, then supply as 
a vector of character strings in the same order as listed in 
\code{other.entity}.}

\item{provenance}{(character; optional) EDI Data Repository Data package ID(s) 
corresponding to parent datasets from which this dataset was created 
(e.g. \code{knb-lter-cap.46.3}).}

\item{user.id}{(character; optional) ID(s) of data repository user account(s). If more 
than one, supply as a vector of character strings.}

\item{user.domain}{(character; optional) Domain of the \code{user.id}(s). Valid options 
for EDI are "LTER" and "EDI". If more than one, supply as a vector of 
character strings in the same order as corresponding \code{user.id}(s).}

\item{package.id}{(character; optional) Data Repository data package ID for this dataset. A 
missing package ID defaults to "edi.101.1".}

\item{write.file}{(logical; optional) Whether to write the EML file.}

\item{return.obj}{(logical; optional) Whether to return the EML as an R object of class 
\code{EML object}.}

\item{x}{(named list; optional) Alternative input to 
\code{make_eml()}. Use \code{template_arguments()} 
to create \code{x}.}
}
\value{
\itemize{
        \item{\strong{EML file} written to \code{eml.path}.}
        \item{\strong{EML object} when \code{return.obj = TRUE}.}
    }
}
\description{
Render the contents of metadata templates into EML, validate, and write
    to file.
}
\details{
\code{make_eml()} reads the contents of metadata templates, 
    auto-extracts additional metadata from the data entities, appends value 
    added content (e.g. resolving keywords to controlled vocabularies), and 
    adds all the metadata content to locations in the EML schema according 
    with best practice recommendations of scientists, data managers, and 
    data repositories. The EML is then validated against the schema and 
    written to file.
}
\examples{
# Initialize data package directory for make_eml()
file.copy(
  from = system.file('/examples/pkg_260', package = 'EMLassemblyline'),
  to = tempdir(),
  recursive = TRUE)

# Set working directory
setwd(paste0(tempdir(), '/pkg_260'))

# Make EML (for data package with data tables and other entities)

make_eml(
  path = './metadata_templates',
  data.path = './data_objects',
  eml.path = './eml',
  dataset.title = 'Sphagnum and Vascular Plant Decomposition under Increasing Nitrogen Additions',
  temporal.coverage = c('2014-05-01', '2015-10-31'),
  maintenance.description = 'completed',
  data.table = c('decomp.csv', 'nitrogen.csv'),
  data.table.description = c('Decomposition data', 'Nitrogen data'),
  other.entity = c('ancillary_data.zip', 'processing_and_analysis.R'),
  other.entity.description = c('Ancillary data', 'Data processing and analysis script'),
  user.id = 'csmith',
  user.domain = 'EDI',
  package.id = 'edi.260.3')

# View EML directory contents
dir('./eml')

# Clean up
unlink('.', recursive = TRUE)

}
